# импоритируем все из модуля turtle (встроенный модуль в python)
from turtle import *
# это не обязателный модуль, но он может упростить некоторые задачи
from math import sqrt

# задаем цвет. Обязательно чтобы второй цвет был "red"
# далее обьясняеться
color("blue", "red")
# создаем переменную с масштабом
m:int = 50
# зададим скорость (если поставить 0, то скорость будет максимальной)
speed(0)
# begin_fill() можно расценивать как начало записи перед основным алгоритмом
begin_fill()
# и перед началом поворачиваем черепашку налево
# это из-за того, что 
left(90)
# выполняем все то, что от нас хочет задание
right(60)
for _ in range(2):
    forward(10 * m)
    right(120)
    forward(5 * m)
    right(240)
    
right(120)
forward(3 * m)
right(90)
forward(20 * sqrt(3) * m)
right(90)
forward(8 * m)
right(120)
for _ in range(2):
    forward(10 * m)
    left(120)
    forward(5 * m)
    left(240)

# после завершения алгоритма обязательно ставим end_fill()
# так мы не просто покажем, что завершили работу алгоритма, но и закончим заливку
end_fill()
# получаем канвас
# Канвас - это эллемент, используемый при работу с графическими состовляющими
canvas = getcanvas()
# создаем счетчик точек
count_point:int = 0

# начинаем перебирать координаты x и y.
# важно помнить, что прежде мы работали в масштабе, а значит мы и продолжим в нем считать
for x in range(-100*m, 100*m, m):
    for y in range(-100*m, 100*m, m):
        # записываем в переменную значение пересечения фигуры в скобках и нашего канваса
        item = canvas.find_overlapping(x, y, x, y)
        # проверяем пересечения
        if len(item) == 1 and item[0] == 5:
            count_point += 1

print(count_point)
done()
exit()
        